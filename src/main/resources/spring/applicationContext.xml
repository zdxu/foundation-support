<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-3.1.xsd 
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
						http://www.springframework.org/schema/context 
					    http://www.springframework.org/schema/context/spring-context-3.1.xsd
					    http://www.springframework.org/schema/mvc  
						http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
					    http://www.springframework.org/schema/util 
					    http://www.springframework.org/schema/util/spring-util.xsd"
	default-lazy-init="true">
	<description>Spring公共配置 </description>
	
	<import resource="classpath:/spring/spring-cache.xml"/>
	<import resource="classpath:/spring/spring-task.xml" />
	
	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
	<context:component-scan base-package="com.zdxu" />
	
	<!-- 使用 阿里巴巴连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	
		<!-- Connection Pooling Info -->
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		<!--<property name="maxIdle" value="${jdbc.pool.maxIdle}" />-->
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		
		<property name="validationQuery" value="select * from dual"/>
	</bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Hibernate配置 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.connection.release_mode">after_transaction</prop>
				
				<!--  非零值，指定JDBC抓取数量的大小 (调用Statement.setFetchSize())  -->
				<prop key="hibernate.jdbc.batch_size">20</prop>
				
				<!-- 慎用                       主要用于：自动创建|更新|验证数据库表结构 -->
				<!-- <prop key="hibernate.hbm2ddl.auto">create</prop> -->
				
				<!-- hibernate 二级缓存配置 -->
				<!-- hibernate4以上的缓存配置 -->
				<prop key="hibernate.cache.use_second_level_cache">true</prop>  
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
				<!-- hibernate3 的缓存配置 
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>--> 
				<!-- 指定缓存配置文件位置 -->
				<prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.ehcache_config_file}</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.zdxu.bd.domain.vo.*</value>
			</list>
		</property>
	</bean>

	<!-- 事务管理器配置,单数据源事务 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	<!-- 国际化配置      用于数据展示国际化动态区分（中文、英文等） -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		 <!-- 国际化信息所在的文件名  模糊匹配 -->    
		<property name="basenames">
			<list>
				<value>messages</value>
			</list>
		</property>
		<!-- 如果在国际化资源文件中找不到对应代码的信息，就用这个代码作为名称  -->
		<property name="useCodeAsDefaultMessage" value="true" />
	</bean>
	
	<!-- 异常处理 -->
	<bean id="handlerExceptionResolver" class="com.zdxu.bd.support.exception.AnnotationHandlerMethodExceptionResolver">
		<property name="defaultErrorView">
			<value>/err/500</value>
		</property>
	</bean>
	
</beans>